import{_ as e,c as a,o as d,ae as r}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"Steps","description":"","frontmatter":{},"headers":[],"relativePath":"zos-dataset-writer/steps.md","filePath":"zos-dataset-writer/steps.md"}'),s={name:"zos-dataset-writer/steps.md"};function o(i,t,n,l,c,p){return d(),a("div",null,t[0]||(t[0]=[r('<h1 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;Steps&quot;">​</a></h1><hr><h2 id="write-to-sequential-dataset" tabindex="-1">Write to Sequential Dataset <a class="header-anchor" href="#write-to-sequential-dataset" aria-label="Permalink to &quot;Write to Sequential Dataset&quot;">​</a></h2><p>Use this step to write input text to a sequential dataset.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>To create a GDG version add (+1) along with GDG base. An output property <strong>DatasetName</strong> will contain the actual GDG version dataset name that is created and can be referred in successive steps of the process.</p></div><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td>Source Type</td><td>Enumeration: TEXT / DATASET / FILE / <code>${p?:dataset.writer.source.type}</code></td><td>Source of data for writing into Output sequential dataset. Select DATASET to write from a PDS member or sequential dataset, FILE to write from a USS file, or TEXT to write text to output sequential dataset.</td><td>Yes</td></tr><tr><td>Source Value</td><td>String</td><td>Text or PDS member or Sequential Dataset or USS File to be written into a Sequential dataset. If the single quotation marks are omitted, the user’s data set prefix from the TSO profile is automatically appended to the front of the data set name. Add encoding of USS File after a comma(,). For example – /path/to/file,UTF-8. If no file encoding is specified, file is considered to be in IBM-1047 encoding. Multiple files or datasets can be passed separated by a newline.</td><td>Yes</td></tr><tr><td>Dataset Name</td><td>String</td><td>Name of a sequential dataset to write input text.</td><td>Yes</td></tr><tr><td>Append</td><td>Boolean</td><td>Select to append input text in the data set.</td><td>No</td></tr><tr><td>Allocate Data Set</td><td>String</td><td>Specify <strong>TRUE</strong> to allocate a sequential data set with passed parameters.</td><td>No</td></tr><tr><td>Delete Existing Data Set</td><td>String</td><td>Specify <strong>TRUE</strong> to delete the sequential data set if already exist before allocation.</td><td>No</td></tr><tr><td>Volume Serial</td><td>String</td><td>Leave blank to use the system default volume.</td><td>No</td></tr><tr><td>Space Units</td><td>Enumeration: TRACKS / CYLINDERS</td><td>Specify the dataset space units. For example, Tracks or Cylinders</td><td>Yes</td></tr><tr><td>Average Record Unit</td><td>Enumeration: – – – / K / M / U</td><td>Select a unit to use when allocating average record length. The unit <strong>U</strong> specifies single-record units (bytes). <strong>K</strong> specifies thousand-record units (kilobytes). <strong>M</strong> specifies million-record units (megabytes). (- – -) specifies the system default value.</td><td>No</td></tr><tr><td>Primary Quantity</td><td>String</td><td>Specify the primary quantity in average record units.</td><td>Yes</td></tr><tr><td>Secondary Quantity</td><td>String</td><td>Specify the secondary quantity in average record units.</td><td>Yes</td></tr><tr><td>Record Format</td><td>Enumeration: FB / F / VB / V / FBA / VBA / FBM / FM / VBM / VM</td><td>Specify the record format.</td><td>Yes</td></tr><tr><td>Record Length</td><td>String</td><td>Specify the record length.</td><td>Yes</td></tr><tr><td>Block Size</td><td>String</td><td>Specify the number of bytes of data to place in each block, based on the record length.</td><td>Yes</td></tr></tbody></table>',6)]))}const S=e(s,[["render",o]]);export{h as __pageData,S as default};
